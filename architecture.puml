@startuml architecture

package com.example.demo2 {
  class Demo2Application

  package config {
    class WebConfig
  }

  package controller {
    class ArchivController {
      +ArchivRepository
      +addNewArchiv(Integer task_id, Integer user_id, String task_name, String description, LocalDateTime due_date, Boolean is_completed, LocalDateTime archived_at)
      +getAllArchiv()
      +deleteArchiv(Integer task_id)
      +updateArchiv(Integer task_id, Integer user_id, String task_name, String description, LocalDateTime due_date, Boolean is_completed, LocalDateTime archived_at)
    }
    class TaskController {
      +TaskRepository
      +addNewTask(Users user, String task_name, String description, LocalDateTime due_date, Boolean is_completed)
      +getAllTasks()
      +deleteTask(Integer task_id)
      +updateTask(Integer task_id, String task_name, String description, LocalDateTime due_date, Boolean is_completed)
    }
    class UserController {
      +UserRepository
      +addNewUser(String username, String password, Integer user_id)
      +getAllUsers()
      +deleteUser(Integer user_id)
      +updateUser(Integer user_id, String username, String password)
      +getUserByUsername(String username)
    }
  }

  package domain {
    class Archiv {
      +Integer archiv_id
      +Integer task_id
      +Integer user_id
      +String task_name
      +String description
      +LocalDateTime due_date
      +Boolean is_completed
      +LocalDateTime archived_at
      +getArchivId()
      +setArchivId(Integer archiv_id)
      +getTaskId()
      +setTaskId(Integer task_id)
      +getUserId()
      +setUserId(Integer user_id)
      +getTaskName()
      +setTaskName(String task_name)
      +getDescription()
      +setDescription(String description)
      +getDueDate()
      +setDueDate(LocalDateTime due_date)
      +getIsCompleted()
      +setIsCompleted(Boolean is_completed)
      +getArchivedAt()
      +setArchivedAt(LocalDateTime archived_at)
    }
    class Tasks {
      +Integer task_id
      +Users user
      +String task_name
      +String description
      +LocalDateTime due_date
      +Boolean is_completed
      +getTaskId()
      +setTaskId(Integer task_id)
      +getUser()
      +setUser(Users user)
      +getTaskName()
      +setTaskName(String task_name)
      +getDescription()
      +setDescription(String description)
      +getDueDate()
      +setDueDate(LocalDateTime due_date)
      +getIsCompleted()
      +setIsCompleted(Boolean is_completed)
    }
    class Users {
      +Integer user_id
      +String username
      +String password
      +getId()
      +setId(Integer user_id)
      +getName()
      +setName(String username)
      +getPassword()
      +setPassword(String password)
    }
  }

  package repository {
    class ArchivRepository{}
    class TaskRepository{}
    class UserRepository{}
  }
}

package com.example.demo2.test {
  class ArchitectureTests
  class ArchivControllerTests {
    +setUp()
    +testAddNewArchiv()
    +testGetAllArchiv()
    +testDeleteArchiv()
    +testUpdateArchiv()
  }
  class TaskControllerTests {
    +setUp()
    +testAddNewTask()
    +testGetAllTasks()
    +testDeleteTask()
    +testUpdateTask()
  }
  class UserControllerTests {
    +setUp()
    +testAddNewUser()
    +testGetAllUsers()
    +testDeleteUser()
    +testUpdateUser()
    +testGetUserByUsername()
    +testGetUserByUsernameNotFound()
  }
  class DatabaseConnectionTests {
    +contextLoads()
    +testDatabaseQuery()
  }
}

' Beziehungen zwischen Controllern und Repositories
controller.ArchivController --> repository.ArchivRepository
controller.TaskController --> repository.TaskRepository
controller.UserController --> repository.UserRepository

' Beziehungen zwischen DomÃ¤nenklassen und Repositories
repository.ArchivRepository --> domain.Archiv
repository.TaskRepository --> domain.Tasks
repository.UserRepository --> domain.Users

' Beziehungen zwischen Controllern und DomÃ¤nenklassen
controller.ArchivController --> domain.Archiv
controller.TaskController --> domain.Tasks
controller.UserController --> domain.Users

' Beziehungen zwischen Testklassen und den getesteten Klassen
com.example.demo2.test.ArchivControllerTests --> controller.ArchivController
com.example.demo2.test.TaskControllerTests --> controller.TaskController
com.example.demo2.test.UserControllerTests --> controller.UserController
com.example.demo2.test.ArchitectureTests --> repository.ArchivRepository
com.example.demo2.test.ArchitectureTests --> repository.TaskRepository
com.example.demo2.test.ArchitectureTests --> repository.UserRepository
com.example.demo2.test.ArchitectureTests --> domain.Archiv
com.example.demo2.test.ArchitectureTests --> domain.Tasks
com.example.demo2.test.ArchitectureTests --> domain.Users

@enduml